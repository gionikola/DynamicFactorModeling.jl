var documenterSearchIndex = {"docs":
[{"location":"#DynamicFactorModeling.jl","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.jl","text":"","category":"section"},{"location":"","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.jl","text":"Documentation for DynamicFactorModeling.jl","category":"page"},{"location":"","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.jl","text":"Modules = [DynamicFactorModeling]","category":"page"},{"location":"#DynamicFactorModeling.DFMMeans","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.DFMMeans","text":"DFMMeans(F::Array{Float64}, B::Array{Float64}, S::Array{Float64}, P::Array{Float64}, P2::Array{Float64})\n\nDescription: HDFM Bayesian estimator-generated latent factor and hyperparameter sample means (expected values). \n\nInputs:\n\nF = MCMC-generated latent factor sample mean.\nB = MCMC-generated observation equation regression coefficient sample means.\nS = MCMC-generated observable variable idiosyncratic error disturbance variance sample means. \nP = MCMC-generated latent factor autoregressive coefficient sample means. \nP2 = MCMC-generated idiosyncratic error autoregressive coefficient sample means. \n\n\n\n\n\n","category":"type"},{"location":"#DynamicFactorModeling.DFMResults","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.DFMResults","text":"DFMResults(F::Array{Float64}, B::Array{Float64}, S::Array{Float64}, P::Array{Float64}, P2::Array{Float64}, means::DFMMeans)\n\nDescription: HDMF Bayesian estimator-generated MCMC posterior distribution samples and their means for latent factors and hyperparameters. \n\nInputs:\n\nF = MCMC-generated latent factor sample.\nB = MCMC-generated observation equation regression coefficient sample.\nS = MCMC-generated observable variable idiosyncratic error disturbance variance sample. \nP = MCMC-generated latent factor autoregressive coefficient sample. \nP2 = MCMC-generated idiosyncratic error autoregressive coefficient sample. \nmeans = HDFM Bayesian estimator-generated latent factor and hyperparameter sample means (expected values).\n\n\n\n\n\n","category":"type"},{"location":"#DynamicFactorModeling.DFMStruct","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.DFMStruct","text":"DFMStruct(factorlags::Int64, errorlags::Int64, ndraws::Int64, burnin::Int64)\n\nDescription: 1-level DFM lag structure specification and MCMC sample size for Bayesian estimation. \n\nInputs:\n\nfactorlags = Number of lags in the autoregressive specification of the latent factors. \nerrorlags = Number of lags in the autoregressive specification of the observable variable idiosyncratic errors.\nndraws = Number of MCMC draws used for posterior distributions.\nburnin = Number of initial MCMC draws discarded. \n\n\n\n\n\n","category":"type"},{"location":"#DynamicFactorModeling.HDFM","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.HDFM","text":"HDFM(nlevels, nvar, nfactors, fassign, flags, varlags, varcoefs, fcoefs, fvars, varvars)\n\nDescription: Creates an object of type HDFM that contains all parameters necessary to specify a multi-level linear dynamic factor data-generating process. This is a convenient alternative to specifying an HDFM directly in state-space form. \n\nInputs: \n\nnlevels = number of levels in the multi-level model structure.\nnvar = number of variables.\nnfactors = number of factors for each level (vector of length nlevels). \nfassign = determines which factor is assigned to which variable for each level (integer matrix of size nvar × nlevels).\nflags = number of autoregressive lags for factors of each level (factors of the same level are restricted to having the same number of lags; vector of length nlevels).\nvarlags = number of observed variable error autoregressive lags (vector of length nvar).\nvarcoefs = vector of coefficients for each variable in the observation equation (length 1+nlevels, where first entry represents the intercept). \nfcoefs = list of nlevels number of matrices, for which each row contains vectors of the autoregressive lag coefficients of the corresponding factor. \nfvars = list of nlevels number of vectors, where each entry contains the disturbance variance of the corresponding factors.\nvarvars = vector of nvar number of entries, where each entry contains the innovation variance of the corresponding variable.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicFactorModeling.HDFMStruct","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.HDFMStruct","text":"HDFMStruct(nlevels::Int64, nfactors::Array{Int64,1}, factorassign::Array{Int64,2}, factorlags::Array{Int64,1}, errorlags::Array{Int64,1}, ndraws::Int64, burnin::Int64)\n\nDescription: Multi-level/hierarchical DFM (HDFM) level, factor assignment, and lag structure specification, and MCMC sample size for Bayesian estimation. \n\nInputs:\n\nnlevels = Number of levels in the HDFM specification. \nnvars = Number of observable variables in the HDFM specification. \nnfactors = Number of factor per level in the HDFM specification. \nfactorassign = Factors assigned to each variable across all levels. \nfactorlags = Number of lags in the autoregressive specification of the latent factors. \nerrorlags = Number of lags in the autoregressive specification of the observable variable idiosyncratic errors.\nndraws = Number of MCMC draws used for posterior distributions.\nburnin = Number of initial MCMC draws discarded. \n\n\n\n\n\n","category":"type"},{"location":"#DynamicFactorModeling.SSModel","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.SSModel","text":"SSModel(H, A, F, μ, R, Q, Z)\n\nDescription: A type object containing all parameters necessary to specify a data-generating process in state-space form.  Measurement Equation:        y{t} = H β{t} + A z{t} + e{t}  Transition Equation:         β{t} = μ + F β{t-1} + v{t}     e{t} ~ i.i.d.N(0,R)     v{t} ~ i.i.d.N(0,Q)     z{t} ~ i.i.d.N(0,Z)     E(et vs') = 0\n\nInputs:\n\nH = measurement equation state vector coefficient matrix.\nA = measurement equation predetermined vector coefficient matrix. \nF = state equation companion matrix.\nμ = state equation intercept vector.\nR = measurement equation error covariance matrix. \nQ = state equation innovation covariance matrix.\nZ = pretermined vector covariance matrix.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicFactorModeling.KN1LevelEstimator-Tuple{Matrix{Float64}, DFMStruct}","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.KN1LevelEstimator","text":"KNSingleFactorEstimator(data::Array{Float64,2}, dfm::DFMStruct)\n\nDescription: Estimate a single-factor DFM using the Kim-Nelson approach. \n\nInputs:\n\ndata = Matrix with each column being a data series. \ndfm = Model structure specification. \n\nOutputs:\n\nresults = HDMF Bayesian estimator-generated MCMC posterior distribution samples and their means for latent factors and hyperparameters.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicFactorModeling.KN2LevelEstimator-Tuple{Matrix{Float64}, HDFMStruct}","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.KN2LevelEstimator","text":"KN2LevelEstimator(data::Array{Float64,2}, hdfm::HDFMStruct)\n\nDescription: Estimate a two-level HDFM using the Kim-Nelson approach.  Both the latent factors and hyperparameters are estimated using the Bayesian approach outlined in Kim and Nelson (1999).   \n\nInputs:\n\ndata = Matrix with each column being a data series. \nhdfm = Model structure specification. \n\nOutputs:\n\nresults = HDMF Bayesian estimator-generated MCMC posterior distribution samples and their means for latent factors and hyperparameters.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicFactorModeling.KNFactorSampler-Tuple{Any, Any}","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.KNFactorSampler","text":"KNFactorSampler(data_y, ssmodel)\n\nDescription:  Draw a sample series of dynamic factor from conditional distribution in Ch 8, Kim & Nelson (1999). Measurement Equation:        y{t} = H{t} β{t} + A z{t} + e{t}. Transition Equation:         β{t} = μ + F β{t-1} + v{t};     e{t} ~ i.i.d.N(0,R);     v{t} ~ i.i.d.N(0,Q);     z{t} ~ i.i.d.N(0,Z);     E(et v_s') = 0.\n\nInputs: \n\ndata      = observed data \nH         = measurement eq. state coef. matrix\nA         = measurement eq. exogenous coef. matrix\nF         = state eq. companion matrix\nμ         = state eq. intercept term\nR         = covariance matrix on measurement disturbance\nQ         = covariance matrix on state disturbance\nZ         = covariance matrix on predetermined var vector \n\n\n\n\n\n","category":"method"},{"location":"#DynamicFactorModeling.OW1LevelEstimator-Tuple{Matrix{Float64}, DFMStruct}","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.OW1LevelEstimator","text":"OW1LevelEstimator(data::Array{Float64,2}, dfm::DFMStruct)\n\nDescription: Estimate a single-factor DFM using the Otrok-Whiteman approach. \n\nInputs:\n\ndata = Matrix with each column being a data series. \ndfm = Model structure specification. \n\nOutputs:\n\nresults = HDMF Bayesian estimator-generated MCMC posterior distribution samples and their means for latent factors and hyperparameters.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicFactorModeling.OW2LevelEstimator-Tuple{Matrix{Float64}, HDFMStruct}","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.OW2LevelEstimator","text":"OW2LevelEstimator(data::Array{Float64,2}, hdfm::HDFMStruct)\n\nDescription: Estimate a two-level HDFM using the Kim-Nelson approach.  Both the latent factors and hyperparameters are estimated using the Bayesian approach outlined in Kim and Nelson (1999).   \n\nInputs:\n\ndata = Matrix with each column being a data series. \nhdfm = Model structure specification. \n\nOutputs:\n\nresults = HDMF Bayesian estimator-generated MCMC posterior distribution samples and their means for latent factors and hyperparameters.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicFactorModeling.PCA1LevelEstimator-Tuple{Matrix{Float64}, DFMStruct}","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.PCA1LevelEstimator","text":"PCA1LevelEstimator(data::Array{Float64,2}, dfm::DFMStruct)\n\nDescription: Estimate a single-factor DFM using the Kim-Nelson approach. \n\nInputs:\n\ndata = Matrix with each column being a data series. \ndfm = Model structure specification. \n\nOutputs:\n\nresults = HDMF Bayesian estimator-generated MCMC posterior distribution samples and their means for latent factors and hyperparameters.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicFactorModeling.PCA2LevelEstimator-Tuple{Matrix{Float64}, HDFMStruct}","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.PCA2LevelEstimator","text":"PCA2LevelEstimator(data::Array{Float64,2}, hdfm::HDFMStruct)\n\nDescription: Estimate a two-level HDFM using the PCA approach. The latent factors are estimated using PCA, while the hyperparameters are estimated using the Bayesian approach outlined in Kim and Nelson (1999).  \n\nInputs:\n\ndata = Matrix with each column being a data series. \nhdfm = Model structure specification. \n\nOutputs:\n\nresults = HDMF Bayesian estimator-generated MCMC posterior distribution samples and their means for latent factors and hyperparameters.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicFactorModeling.ar-NTuple{18, Any}","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.ar","text":"ar(y, x, p, b0_, B0__, r0_, R0__, v0_, d0_, b0, s20, phi0, xvar, nfc, facts, capt, nreg, Size)\n\nDescription: Generate βi , ϕi, and σ^2_i estimates based on the posterior distributions (eqs. 6-8) on pg. 1002 of Otrok and Whiteman (1998). \n\nInputs:\n\ny = observed dependent variable / data.  \nx = measurement equation regressors (intercept + factor).\np = number of state eq. lags. \nb0_ = prior mean of factor loading (factor coefficient in measurement equation). \nB0__ = prior variance of factor loading (factor coefficient in measurement equation). \nr0_ = prior mean of phi (idiosyncratic AR polynomial). \nR0__ = prior precision of phi (idiosyncratic AR polynomial). \nv0_ = inverted gamma parameter of innovation variances. \nd0_ = inverted gamma parameter of innovation variances. \nb0 = old draw of factor loading. \ns20 = old draw of innovation variances. \nphi0 = old draw of phi (idiosyncratic AR polynomial). \nxvar = measurement eq. regressor index. \nnfc = number of factors. \nfacts = factor draw. \ncapt = total number of time periods / observations in the sample. \nnreg = number of regressors in each observable equation, constant plus K factors   \nSize = number of variables each factor loads on\n\nOutputs:\n\nb0 = β coefficient hyperparameter estimates. \ns20 = σ^2 coefficient hyperparameter estimate. \nphi1 = ϕ coefficient hyperparameter estimates. \nfacts = factor estimate. \n\n\n\n\n\n","category":"method"},{"location":"#DynamicFactorModeling.ar_LJ-NTuple{19, Any}","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.ar_LJ","text":"\n\n\n\n","category":"method"},{"location":"#DynamicFactorModeling.arfac-NTuple{7, Any}","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.arfac","text":"\n\n\n\n","category":"method"},{"location":"#DynamicFactorModeling.convertHDFMtoSS-Tuple{HDFM}","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.convertHDFMtoSS","text":"convertHDFMtoSS(hdfm)\n\nDescription: Converts an HDFM object to an SSModel object. \n\nInputs:\n\nhdfm = HDFM object containing all HDFM DGP parameters. \n\nOutputs:\n\nssmodel = SSModel object containing all state-space model parameters.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicFactorModeling.createSSforHDFM-Tuple{HDFM}","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.createSSforHDFM","text":"createSSforHDFM(hdfm)\n\nDescription: Create state-space form coefficient and variance matrices for an HDFM object.\n\nInputs:\n\nhdfm = HDFM object with all parameters necessary to specify a multi-level linear dynamic factor data-generating process. \n\n\n\n\n\n","category":"method"},{"location":"#DynamicFactorModeling.diagrv-Tuple{Any, Any}","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.diagrv","text":"diagrv(X,V)\n\nDescription:  Replace the diagonal of matrix X with vector V. \n\nInputs: \n\nX = matrix of interest \nV = new diagonal of X \n\nOutputs:\n\nX_new = X with new diagonal V \n\n\n\n\n\n","category":"method"},{"location":"#DynamicFactorModeling.firstComponentFactor-Tuple{Any}","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.firstComponentFactor","text":"\n\n\n\n","category":"method"},{"location":"#DynamicFactorModeling.gendiff-Tuple{Any, Any}","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.gendiff","text":"gendiff(z, phi)\n\nDescription: Difference a series z using the lag coefficients provided in phi. \n\nInputs:\n\nz = time series. \nphi = lag coefficient vector. \n\nOutputs:\n\nzgdiff = quasi-differenced version of the inputted series z. \n\n\n\n\n\n","category":"method"},{"location":"#DynamicFactorModeling.ident-Tuple{Any}","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.ident","text":"ident(p)\n\nDescription: Create dense identity matrix of dimension p × p.\n\nInputs:\n\np = number of columns and rows of identity matrix.\n\nOutputs:\n\nident_mat = p × p dense identity matrix with Float64.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicFactorModeling.invpd-Tuple{Any}","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.invpd","text":"invpd(X)\n\nDescription: Invert matrix X using augmented eigenvalues if X is not positive-definite. \n\nInputs:\n\nX = matrix of interest \n\nOutput:\n\nX_inv = inverse of input matrix X \n\n\n\n\n\n","category":"method"},{"location":"#DynamicFactorModeling.kalmanFilter-Tuple{Any, Any}","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.kalmanFilter","text":"kalmanFilter(data, ssmodel)\n\nDescription:  Apply Kalman filter to observed data.  Measurement Equation:        y{t} = H{t} β{t} + A z{t} + e{t} . Transition Equation:         β{t} = μ + F β{t-1} + v{t};     e{t} ~ i.i.d.N(0,R);     v{t} ~ i.i.d.N(0,Q);     z{t} ~ i.i.d.N(0,Z);     E(et v_s') = 0.\n\nInputs: \n\ndata      = observed data \nH         = measurement eq. state coef. matrix\nA         = measurement eq. exogenous coef. matrix\nF         = state eq. companion matrix\nμ         = state eq. intercept term\nR         = covariance matrix on measurement disturbance\nQ         = covariance matrix on state disturbance\nZ         = covariance matrix on predetermined var vector \n\n\n\n\n\n","category":"method"},{"location":"#DynamicFactorModeling.kalmanSmoother-Tuple{Any, Any}","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.kalmanSmoother","text":"kalmanSmoother(data, ssmodel)\n\nDescription:  Apply Kalman smoother to observed data.  Measurement Equation:        y{t} = H{t} β{t} + A z{t} + e{t}. Transition Equation:         β{t} = μ + F β{t-1} + v{t};     e{t} ~ i.i.d.N(0,R);     v{t} ~ i.i.d.N(0,Q);     z{t} ~ i.i.d.N(0,Z);     E(et v_s') = 0.\n\nInputs: \n\ndata      = observed data \nH         = measurement eq. state coef. matrix\nA         = measurement eq. exogenous coef. matrix\nF         = state eq. companion matrix\nμ         = state eq. intercept term\nR         = covariance matrix on measurement disturbance\nQ         = covariance matrix on state disturbance\nZ         = covariance matrix on predetermined var vector \n\n\n\n\n\n","category":"method"},{"location":"#DynamicFactorModeling.linearRegressionSampler-Tuple{Any, Any}","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.linearRegressionSampler","text":"linearRegressionSampler(Y,X)\n\nDescription:  Estimate β and σ^2 in Y = Xβ + e, e ~ N(0,σ^2 I_T). Generate samples of β and σ^2. \n\nInputs: \n\nY     = Dependent data matrix\nX     = Independent data matrix \n\n\n\n\n\n","category":"method"},{"location":"#DynamicFactorModeling.linearRegressionSamplerRestrictedVariance-Tuple{Any, Any, Any}","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.linearRegressionSamplerRestrictedVariance","text":"linearRegressionSamplerRestrictedVariance(Y, X, σ2)\n\nDescription:  Estimate β and σ^2 in Y = Xβ + e, e ~ N(0,σ^2 I_T), where σ^2 is restricted to some chosen value.  Generate samples of β and σ^2. \n\nInputs: \n\nY     = Dependent data matrix\nX     = Independent data matrix \nσ2    = Restricted error variance \n\n\n\n\n\n","category":"method"},{"location":"#DynamicFactorModeling.rnchisq-Tuple{Any}","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.rnchisq","text":"rnchisq(m)\n\nDescription: Draw sample from a chi-square distribution.\n\nInputs:\n\nm = degrees of freedom. \n\nOutputs:\n\ng = draw from a chi-square distribution with m degrees of freedom. \n\n\n\n\n\n","category":"method"},{"location":"#DynamicFactorModeling.seqa-Tuple{Any, Any, Any}","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.seqa","text":"seqa(a, b, c)\n\nDescription: Create a sequence with c # of inputs, starting at a with b increments.\n\nInputs:\n\na = starting value of the sequence.\nb = increment size.\nc = number of increments. \n\nOutputs:\n\nseq = sequence with c # of inputs, starting at a with b increments.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicFactorModeling.seqm-Tuple{Any, Any, Any}","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.seqm","text":"seqm(a,b,c)\n\nDescription: Prouce a sequence of values.\n\nInputs:\n\na = initial value of sequence \nb = increment scaling size \nc = number of values in the sequence\n\nOutputs:\n\nseq = geometric sequence \n\n\n\n\n\n","category":"method"},{"location":"#DynamicFactorModeling.sigbig-Tuple{Any, Any, Any}","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.sigbig","text":"sigbig(phi, p, capt)\n\nDescription: Create T×T matrix S^(-1) (pg. 1003 of Otrok and Whiteman (1998)). \n\nInputs: \n\nphi   = Lag coefficients associated with idiosyncratic error autoregression.\np     = Number of lags.\ncapt  = total number of time periods in the sample.\n\nOutputs:\n\nSi    = T×T matrix S^(-1). \n\n\n\n\n\n","category":"method"},{"location":"#DynamicFactorModeling.sigmat-Tuple{Any, Any}","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.sigmat","text":"sigmat(phi, p)\n\nDescription: Yield the stationary covariance matrix of the first p errors (pg 1001 of Otrok and Whiteman (1998)).\n\nInputs:\n\nphi  = Lag coefficients associated with idiosyncratic error autoregression.\np    = Number of lags.\n\nOutputs:\n\nStationary covariance matrix of the first p errors.  \n\n\n\n\n\n","category":"method"},{"location":"#DynamicFactorModeling.sim_MvNormal-Tuple{Any, Any}","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.sim_MvNormal","text":"\n\n\n\n","category":"method"},{"location":"#DynamicFactorModeling.sim_MvNormal_alt-Tuple{Any, Any}","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.sim_MvNormal_alt","text":"\n\n\n\n","category":"method"},{"location":"#DynamicFactorModeling.simulateSSModel-Tuple{Any, SSModel}","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.simulateSSModel","text":"simulateSSModel(num_obs, ssmodel::SSModel)\n\nDescription:  Generate data from a DGP in state space form. Measurement Equation:        y{t} = H β{t} + A z{t} + e{t}  Transition Equation:         β{t} = μ + F β{t-1} + v{t}     e{t} ~ i.i.d.N(0,R)     v{t} ~ i.i.d.N(0,Q)     z{t} ~ i.i.d.N(0,Z)     E(et vs') = 0\n\nInputs: \n\nnum_obs   = number of observations\nssmodel   = SSModel object containing all parameters necessary to specify a data-generating process in state-space form.  \n\n\n\n\n\n","category":"method"},{"location":"#DynamicFactorModeling.transp_dbl-Tuple{Any}","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.transp_dbl","text":"transp_dbl(A)\n\nDescription: Transpose matrix, so that the output type is Array{Float64,2}. \n\nInputs:\n\nA = matrix.\n\nOutputs:\n\ntransp_A = dense transposed matrix A. \n\n\n\n\n\n","category":"method"},{"location":"#DynamicFactorModeling.transp_int-Tuple{Any}","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.transp_int","text":"transp_int(A)\n\nDescription: Transpose matrix, so that the output type is Array{Int64,2}. \n\nInputs:\n\nA = matrix.\n\nOutputs:\n\ntransp_A = dense transposed matrix A. \n\n\n\n\n\n","category":"method"},{"location":"#DynamicFactorModeling.vardecomp2level-NTuple{4, Any}","page":"DynamicFactorModeling.jl","title":"DynamicFactorModeling.vardecomp2level","text":"vardecomp2level(data::Array{Float64, 2}, factor::Array{Float64}, betas::Array{Float64}, factorassign::Array{Float64})\n\nDescription: Compute the portion of the variation of each observable series that may be attributed to their corresponding/assigned latent factors across all levels. \n\nInputs: \n\ndata = Matrix with each column representing a data series. \nfactor = Matrix containing latent factor estimates.\nbetas = Matrix containing observation equation coefficient parameter estimates.\nfactorassign = Matrix containing the indeces of factors across all levels (columns) assigned to each observable series (rows). \n\nOutput: \n\nvardecomps = Matrix containing the variance contributions of factors across all levels (columns) corresponding to each observable series (rows). \n\n\n\n\n\n","category":"method"}]
}
